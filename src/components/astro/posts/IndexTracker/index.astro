---
import type { BlogPost } from 'types/blog'

interface Props {
  post: BlogPost
}
const { post } = Astro.props

const headingRegex = /^###\s*(.+)$/gm

const headings = [...post?.body!.matchAll(headingRegex)].map((match) => match[1])
---

<aside
  class="scrollbar sticky top-24 hidden h-fit max-h-[calc(100vh-210px)] overflow-y-auto p-2 pb-16 md:block"
>
  <nav class="grid">
    {
      headings.map((heading) => {
        {
          const slug = heading.toLowerCase().replace(/\s/g, '-')
          return (
            <a href={`#${slug}`} class="index-tracker-timeline prose-body1 p-3 text-object-high">
              {heading}
            </a>
          )
        }
      })
    }
  </nav>
</aside>

<script>
  const transitionBoundary = 150

  const headingsElements = document.querySelectorAll('article h3[id]')
  const navLinks = document.querySelectorAll('aside nav a')

  const onScroll = () => {
    let activeId = headingsElements[0].getAttribute('id') ?? ''
    headingsElements.forEach((heading) => {
      const rect = heading.getBoundingClientRect()

      if (rect.top <= transitionBoundary) {
        activeId = heading.getAttribute('id') ?? ''
      }
    })

    if (activeId) {
      const activeIndex = Array.from(navLinks).findIndex(
        (link) => link.getAttribute('href') === `#${activeId}`,
      )

      navLinks.forEach((link, i) => {
        if (i <= activeIndex) {
          link.classList.add('before:bg-primary-main')

          if (i === activeIndex) {
            link.classList.add('text-primary-main')
          } else {
            link.classList.remove('text-primary-main')
          }
        } else {
          link.classList.remove('before:bg-primary-main')
          link.classList.remove('text-primary-main')
        }
      })
      const container = document.querySelector('aside')
      const activeLink = navLinks[activeIndex]
      if (activeLink && container) {
        const containerRect = container.getBoundingClientRect()
        const linkRect = activeLink.getBoundingClientRect()
        if (linkRect.top < containerRect.top || linkRect.bottom > containerRect.bottom) {
          activeLink.scrollIntoView({
            behavior: 'smooth',
            block: 'nearest',
          })
        }
      }
    }
  }

  window.addEventListener('scroll', onScroll)
  onScroll()
</script>
